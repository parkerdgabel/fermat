{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{= -compare quot even? mod rem integer? numerator odd? compare denominator}, :name com.gfredericks.exact.impl, :imports nil, :requires {cljs cljs.core, cljs.core cljs.core, int goog.math.Integer, goog.math.Integer goog.math.Integer}, :cljs.spec/speced-vars [], :uses nil, :defs {ZERO {:name com.gfredericks.exact.impl/ZERO, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 175, :column 1, :end-line 175, :end-column 10, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 175, :column 6, :end-line 175, :end-column 10}}, gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 39, :column 17, :end-line 39, :end-column 20, :private true, :arglists (quote ([x y]))}, :private true, :name com.gfredericks.exact.impl/gcd, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 20, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, add {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 182, :column 7, :end-line 182, :end-column 10, :arglists (quote ([x y]))}, :name com.gfredericks.exact.impl/add, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 10, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, negate {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 186, :column 7, :end-line 186, :end-column 13, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/negate, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, AddWithInteger {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 14, :column 14, :end-line 14, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-add-with-integer [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/AddWithInteger, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 28, :column 1, :line 14, :protocol-info {:methods {-add-with-integer [[x y]]}}, :info nil, :end-line 14, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, normalize {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 47, :column 17, :end-line 47, :end-column 26, :private true, :arglists (quote ([n d]))}, :private true, :name com.gfredericks.exact.impl/normalize, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 26, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d]))}, -compare {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 33, :column 4, :end-line 33, :end-column 12, :protocol com.gfredericks.exact.impl/Ordered, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/Ordered, :name com.gfredericks.exact.impl/-compare, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 12, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, invert {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 194, :column 7, :end-line 194, :end-column 13, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/invert, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, CompareToInteger {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 34, :column 14, :end-line 34, :end-column 30, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-compare-to-integer [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/CompareToInteger, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 30, :column 1, :line 34, :protocol-info {:methods {-compare-to-integer [[x y]]}}, :info nil, :end-line 34, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, -add {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 13, :column 4, :end-line 13, :end-column 8, :protocol com.gfredericks.exact.impl/Add, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/Add, :name com.gfredericks.exact.impl/-add, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 8, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, string->integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 202, :column 7, :end-line 202, :end-column 22, :arglists (quote ([s radix]))}, :name com.gfredericks.exact.impl/string->integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :method-params ([s radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s radix]))}, AddWithRatio {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 16, :column 14, :end-line 16, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-add-with-ratio [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/AddWithRatio, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 26, :column 1, :line 16, :protocol-info {:methods {-add-with-ratio [[x y]]}}, :info nil, :end-line 16, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, -invert {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 27, :column 4, :end-line 27, :end-column 11, :protocol com.gfredericks.exact.impl/Invert, :doc nil, :arglists (quote ([x]))}, :protocol com.gfredericks.exact.impl/Invert, :name com.gfredericks.exact.impl/-invert, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}, native-integer? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 249, :column 7, :end-line 249, :end-column 22, :arglists (quote ([num]))}, :name com.gfredericks.exact.impl/native-integer?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num]))}, CompareToRatio {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 36, :column 14, :end-line 36, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-compare-to-ratio [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/CompareToRatio, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 28, :column 1, :line 36, :protocol-info {:methods {-compare-to-ratio [[x y]]}}, :info nil, :end-line 36, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, quot {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 220, :column 7, :end-line 220, :end-column 11, :arglists (quote ([x n]))}, :name com.gfredericks.exact.impl/quot, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 11, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, MultiplyWithInteger {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 21, :column 14, :end-line 21, :end-column 33, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-multiply-with-integer [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/MultiplyWithInteger, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 33, :column 1, :line 21, :protocol-info {:methods {-multiply-with-integer [[x y]]}}, :info nil, :end-line 21, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, minus-two-to-fifty-three {:name com.gfredericks.exact.impl/minus-two-to-fifty-three, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 246, :column 1, :end-line 246, :end-column 30, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 246, :column 6, :end-line 246, :end-column 30}, :tag number}, two-to-fifty-three {:name com.gfredericks.exact.impl/two-to-fifty-three, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 243, :column 1, :end-line 243, :end-column 24, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 243, :column 6, :end-line 243, :end-column 24}, :tag any}, Multiply {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 19, :column 14, :end-line 19, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-multiply [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/Multiply, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :column 1, :line 19, :protocol-info {:methods {-multiply [[x y]]}}, :info nil, :end-line 19, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, -multiply-with-ratio {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 24, :column 4, :end-line 24, :end-column 24, :protocol com.gfredericks.exact.impl/MultiplyWithRatio, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/MultiplyWithRatio, :name com.gfredericks.exact.impl/-multiply-with-ratio, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 24, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, even? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 239, :column 7, :end-line 239, :end-column 12, :arglists (quote ([n]))}, :name com.gfredericks.exact.impl/even?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, mod {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 230, :column 7, :end-line 230, :end-column 10, :arglists (quote ([x n]))}, :name com.gfredericks.exact.impl/mod, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 10, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, Invert {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 26, :column 14, :end-line 26, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-invert [[x]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/Invert, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 20, :column 1, :line 26, :protocol-info {:methods {-invert [[x]]}}, :info nil, :end-line 26, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, rem {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 225, :column 7, :end-line 225, :end-column 10, :arglists (quote ([x n]))}, :name com.gfredericks.exact.impl/rem, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 10, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, -ratio {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 123, :column 17, :end-line 123, :end-column 23, :private true, :arglists (quote ([n] [n d])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n d]), :arglists ([n] [n d]), :arglists-meta (nil nil)}}, :private true, :name com.gfredericks.exact.impl/-ratio, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n d]), :arglists ([n] [n d]), :arglists-meta (nil nil)}, :method-params ([n] [n d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n d])}, -multiply-with-integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 22, :column 4, :end-line 22, :end-column 26, :protocol com.gfredericks.exact.impl/MultiplyWithInteger, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/MultiplyWithInteger, :name com.gfredericks.exact.impl/-multiply-with-integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 26, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, Ordered {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 32, :column 14, :end-line 32, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-compare [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/Ordered, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 21, :column 1, :line 32, :protocol-info {:methods {-compare [[x y]]}}, :info nil, :end-line 32, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, -add-with-integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 15, :column 4, :end-line 15, :end-column 21, :protocol com.gfredericks.exact.impl/AddWithInteger, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/AddWithInteger, :name com.gfredericks.exact.impl/-add-with-integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 21, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, -add-with-ratio {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 17, :column 4, :end-line 17, :end-column 19, :protocol com.gfredericks.exact.impl/AddWithRatio, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/AddWithRatio, :name com.gfredericks.exact.impl/-add-with-ratio, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 19, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, -compare-to-ratio {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 37, :column 4, :end-line 37, :end-column 21, :protocol com.gfredericks.exact.impl/CompareToRatio, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/CompareToRatio, :name com.gfredericks.exact.impl/-compare-to-ratio, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 21, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, integer->string {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 206, :column 7, :end-line 206, :end-column 22, :arglists (quote ([n radix]))}, :name com.gfredericks.exact.impl/integer->string, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :method-params ([n radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n radix]))}, integer->native {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 262, :column 7, :end-line 262, :end-column 22, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/integer->native, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -negate {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 30, :column 4, :end-line 30, :end-column 11, :protocol com.gfredericks.exact.impl/Negate, :doc nil, :arglists (quote ([x]))}, :protocol com.gfredericks.exact.impl/Negate, :name com.gfredericks.exact.impl/-negate, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}, Add {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 12, :column 14, :end-line 12, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-add [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/Add, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 17, :column 1, :line 12, :protocol-info {:methods {-add [[x y]]}}, :info nil, :end-line 12, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, ->Ratio {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 59, :column 10, :end-line 59, :end-column 15, :protocols #{com.gfredericks.exact.impl/Negate com.gfredericks.exact.impl/AddWithRatio com.gfredericks.exact.impl/MultiplyWithRatio cljs.core/IEquiv cljs.core/IHash com.gfredericks.exact.impl/Invert com.gfredericks.exact.impl/Add com.gfredericks.exact.impl/AddWithInteger com.gfredericks.exact.impl/CompareToRatio com.gfredericks.exact.impl/Multiply com.gfredericks.exact.impl/Ordered com.gfredericks.exact.impl/MultiplyWithInteger com.gfredericks.exact.impl/Object cljs.core/IComparable com.gfredericks.exact.impl/CompareToInteger}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IComparable}, :factory :positional, :arglists (quote ([n d]))}, :protocols #{com.gfredericks.exact.impl/Negate com.gfredericks.exact.impl/AddWithRatio com.gfredericks.exact.impl/MultiplyWithRatio cljs.core/IEquiv cljs.core/IHash com.gfredericks.exact.impl/Invert com.gfredericks.exact.impl/Add com.gfredericks.exact.impl/AddWithInteger com.gfredericks.exact.impl/CompareToRatio com.gfredericks.exact.impl/Multiply com.gfredericks.exact.impl/Ordered com.gfredericks.exact.impl/MultiplyWithInteger com.gfredericks.exact.impl/Object cljs.core/IComparable com.gfredericks.exact.impl/CompareToInteger}, :name com.gfredericks.exact.impl/->Ratio, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 15, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IComparable}}, integer? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 8, :column 7, :end-line 8, :end-column 15, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/integer?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, Negate {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 29, :column 14, :end-line 29, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-negate [[x]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/Negate, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 20, :column 1, :line 29, :protocol-info {:methods {-negate [[x]]}}, :info nil, :end-line 29, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, numerator {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 210, :column 7, :end-line 210, :end-column 16, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/numerator, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ratio? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 178, :column 7, :end-line 178, :end-column 13, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/ratio?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, -compare-to-integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 35, :column 4, :end-line 35, :end-column 23, :protocol com.gfredericks.exact.impl/CompareToInteger, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/CompareToInteger, :name com.gfredericks.exact.impl/-compare-to-integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 23, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, Ratio {:num-fields 2, :protocols #{com.gfredericks.exact.impl/Negate com.gfredericks.exact.impl/AddWithRatio com.gfredericks.exact.impl/MultiplyWithRatio cljs.core/IEquiv cljs.core/IHash com.gfredericks.exact.impl/Invert com.gfredericks.exact.impl/Add com.gfredericks.exact.impl/AddWithInteger com.gfredericks.exact.impl/CompareToRatio com.gfredericks.exact.impl/Multiply com.gfredericks.exact.impl/Ordered com.gfredericks.exact.impl/MultiplyWithInteger com.gfredericks.exact.impl/Object cljs.core/IComparable com.gfredericks.exact.impl/CompareToInteger}, :name com.gfredericks.exact.impl/Ratio, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 15, :type true, :column 10, :line 59, :record false, :end-line 59, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IComparable}}, odd? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 235, :column 7, :end-line 235, :end-column 11, :arglists (quote ([n]))}, :name com.gfredericks.exact.impl/odd?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ONE {:name com.gfredericks.exact.impl/ONE, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 176, :column 1, :end-line 176, :end-column 9, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 176, :column 6, :end-line 176, :end-column 9}}, -multiply {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 20, :column 4, :end-line 20, :end-column 13, :protocol com.gfredericks.exact.impl/Multiply, :doc nil, :arglists (quote ([x y]))}, :protocol com.gfredericks.exact.impl/Multiply, :name com.gfredericks.exact.impl/-multiply, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 13, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc nil}, compare {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 198, :column 7, :end-line 198, :end-column 14, :arglists (quote ([x y]))}, :name com.gfredericks.exact.impl/compare, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 14, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, MultiplyWithRatio {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 23, :column 14, :end-line 23, :end-column 31, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-multiply-with-ratio [[x y]]}}}, :protocol-symbol true, :name com.gfredericks.exact.impl/MultiplyWithRatio, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 31, :column 1, :line 23, :protocol-info {:methods {-multiply-with-ratio [[x y]]}}, :info nil, :end-line 23, :tag any, :impls #{com.gfredericks.exact.impl/Ratio goog/math.Integer}, :doc nil, :jsdoc ("@interface")}, multiply {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 190, :column 7, :end-line 190, :end-column 15, :arglists (quote ([x y]))}, :name com.gfredericks.exact.impl/multiply, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 15, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, denominator {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 215, :column 7, :end-line 215, :end-column 18, :arglists (quote ([x]))}, :name com.gfredericks.exact.impl/denominator, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, native->integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :line 257, :column 7, :end-line 257, :end-column 22, :arglists (quote ([num]))}, :name com.gfredericks.exact.impl/native->integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact/impl.cljs", :end-column 22, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{n d}, :order [n d]}, :doc "cljs impl."}