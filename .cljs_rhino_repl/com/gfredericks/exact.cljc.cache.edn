{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{= dec < pos? neg? <= * min quot > even? mod - zero? rem max-key / >= integer? numerator ratio? min-key odd? inc + max denominator}, :name com.gfredericks.exact, :imports nil, :requires {core cljs.core, cljs.core cljs.core, impl com.gfredericks.exact.impl, com.gfredericks.exact.impl com.gfredericks.exact.impl}, :cljs.spec/speced-vars [], :uses nil, :defs {ZERO {:name com.gfredericks.exact/ZERO, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 9, :column 1, :end-line 9, :end-column 10, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 9, :column 6, :end-line 9, :end-column 10}}, = {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 23, :column 7, :end-line 23, :end-column 8, :arglists (quote ([x] [x y] [x y & zs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/=, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & zs])}, dec {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 45, :column 7, :end-line 45, :end-column 10, :arglists (quote ([x]))}, :name com.gfredericks.exact/dec, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, < {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 47, :column 7, :end-line 47, :end-column 8, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/<, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, pos? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 111, :column 7, :end-line 111, :end-column 11, :arglists (quote ([x]))}, :name com.gfredericks.exact/pos?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, neg? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 112, :column 7, :end-line 112, :end-column 11, :arglists (quote ([x]))}, :name com.gfredericks.exact/neg?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, string->integer {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 142, :column 7, :end-line 142, :end-column 22, :arglists (quote ([s] [s radix])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s radix]), :arglists ([s] [s radix]), :arglists-meta (nil nil)}}, :name com.gfredericks.exact/string->integer, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s radix]), :arglists ([s] [s radix]), :arglists-meta (nil nil)}, :method-params ([s] [s radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s radix])}, <= {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 67, :column 7, :end-line 67, :end-column 9, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/<=, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, * {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 29, :column 7, :end-line 29, :end-column 8, :arglists (quote ([] [x] [x y] [x y & zs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}}, :name com.gfredericks.exact/*, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists ([] [x] [x y] [x y & zs])}, min {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 93, :column 7, :end-line 93, :end-column 10, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/min, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, quot {:name com.gfredericks.exact/quot, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 118, :column 1, :end-line 118, :end-column 10, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 118, :column 6, :end-line 118, :end-column 10}}, > {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 57, :column 7, :end-line 57, :end-column 8, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/>, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, even? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 134, :column 7, :end-line 134, :end-column 12, :arglists (quote ([n]))}, :name com.gfredericks.exact/even?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, mod {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 120, :column 7, :end-line 120, :end-column 10, :arglists (quote ([x n]))}, :name com.gfredericks.exact/mod, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, - {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 18, :column 7, :end-line 18, :end-column 8, :arglists (quote ([x] [x y] [x y & zs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/-, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & zs])}, zero? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 40, :column 7, :end-line 40, :end-column 12, :arglists (quote ([x]))}, :name com.gfredericks.exact/zero?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, rem {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 125, :column 7, :end-line 125, :end-column 10, :arglists (quote ([x n]))}, :name com.gfredericks.exact/rem, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :method-params ([x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x n]))}, max-key {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 105, :column 7, :end-line 105, :end-column 14, :arglists (quote ([k x] [k x y] [k x y & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/max-key, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}, :method-params ([k x] [k x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 3, :fn-var true, :arglists ([k x] [k x y] [k x y & more])}, integer->string {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 146, :column 7, :end-line 146, :end-column 22, :arglists (quote ([n] [n radix])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n radix]), :arglists ([n] [n radix]), :arglists-meta (nil nil)}}, :name com.gfredericks.exact/integer->string, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [n radix]), :arglists ([n] [n radix]), :arglists-meta (nil nil)}, :method-params ([n] [n radix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists ([n] [n radix])}, integer->native {:name com.gfredericks.exact/integer->native, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 151, :column 1, :end-line 151, :end-column 21, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 151, :column 6, :end-line 151, :end-column 21}}, / {:protocol-inline nil, :meta {:arglists (quote ([x] [x y] [x y & zs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}, :file nil}, :name com.gfredericks.exact//, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & zs]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 35, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & zs])}, >= {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 77, :column 7, :end-line 77, :end-column 9, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/>=, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, integer? {:name com.gfredericks.exact/integer?, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 116, :column 1, :end-line 116, :end-column 14, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 116, :column 6, :end-line 116, :end-column 14}}, numerator {:name com.gfredericks.exact/numerator, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 114, :column 1, :end-line 114, :end-column 15, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 114, :column 6, :end-line 114, :end-column 15}}, ratio? {:name com.gfredericks.exact/ratio?, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 117, :column 1, :end-line 117, :end-column 12, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 117, :column 6, :end-line 117, :end-column 12}}, min-key {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 99, :column 7, :end-line 99, :end-column 14, :arglists (quote ([k x] [k x y] [k x y & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/min-key, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([k x] [k x y]), :arglists ([k x] [k x y] [k x y & more]), :arglists-meta (nil nil nil)}, :method-params ([k x] [k x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists ([k x] [k x y] [k x y & more])}, odd? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 138, :column 7, :end-line 138, :end-column 11, :arglists (quote ([n]))}, :name com.gfredericks.exact/odd?, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, ONE {:name com.gfredericks.exact/ONE, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 10, :column 1, :end-line 10, :end-column 9, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 10, :column 6, :end-line 10, :end-column 9}}, inc {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 44, :column 7, :end-line 44, :end-column 10, :arglists (quote ([x]))}, :name com.gfredericks.exact/inc, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, + {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 12, :column 7, :end-line 12, :end-column 8, :arglists (quote ([] [x] [x y] [x y & zs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}}, :name com.gfredericks.exact/+, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 8, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y] [x y & zs]), :arglists-meta (nil nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists ([] [x] [x y] [x y & zs])}, abs {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 130, :column 7, :end-line 130, :end-column 10, :arglists (quote ([x]))}, :name com.gfredericks.exact/abs, :variadic false, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 87, :column 7, :end-line 87, :end-column 10, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}}, :name com.gfredericks.exact/max, :variadic true, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([x] [x y]), :arglists ([x] [x y] [x y & more]), :arglists-meta (nil nil nil)}, :method-params ([x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x y] [x y & more])}, denominator {:name com.gfredericks.exact/denominator, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 115, :column 1, :end-line 115, :end-column 17, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 115, :column 6, :end-line 115, :end-column 17}}, native->integer {:name com.gfredericks.exact/native->integer, :file ".cljs_rhino_repl/com/gfredericks/exact.cljc", :line 150, :column 1, :end-line 150, :end-column 21, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/com/gfredericks/exact.cljc", :line 150, :column 6, :end-line 150, :end-column 21}}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}