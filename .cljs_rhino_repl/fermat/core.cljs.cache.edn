{:rename-macros {}, :renames {}, :externs {Error {}, Math {log {}}}, :use-macros {}, :excludes #{}, :name fermat.core, :imports nil, :requires {cats.builtin cats.builtin, gstring goog.string, math goog.math, goog.string goog.string, maybe cats.monad.maybe, m cats.core, cats.core cats.core, cats.monad.maybe cats.monad.maybe, goog.string.format goog.string.format, s cljs.spec.alpha, goog.math goog.math, cljs.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {find-k-m {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 198, :column 8, :end-line 198, :end-column 16, :private true, :arglists (quote ([n])), :doc "Rewrites n as 2k*m with m odd."}, :private true, :name fermat.core/find-k-m, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Rewrites n as 2k*m with m odd."}, k-rand-nums {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 207, :column 8, :end-line 207, :end-column 19, :private true, :arglists (quote ([k n])), :doc "Generates k random numbers in between 2 and n-2. Helper function for Miller-Rabin Primality Test."}, :private true, :name fermat.core/k-rand-nums, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([k n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k n])), :doc "Generates k random numbers in between 2 and n-2. Helper function for Miller-Rabin Primality Test."}, primes {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 291, :column 7, :end-line 291, :end-column 13, :arglists (quote ([n])), :doc "Returns a list of the first n primes."}, :name fermat.core/primes, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a list of the first n primes."}, totient {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 132, :column 7, :end-line 132, :end-column 14, :arglists (quote ([n])), :doc "Euler-totient function for n"}, :name fermat.core/totient, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Euler-totient function for n"}, gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 60, :column 7, :end-line 60, :end-column 10, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, :name fermat.core/gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, lazy-primes {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 269, :column 7, :end-line 269, :end-column 18, :arglists (quote ([])), :doc "Returns a lazy sequence of primes."}, :name fermat.core/lazy-primes, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a lazy sequence of primes."}, floor {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 89, :column 7, :end-line 89, :end-column 12, :arglists (quote ([n])), :doc "Returns the nearest integer less than n."}, :name fermat.core/floor, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the nearest integer less than n."}, prime? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 259, :column 7, :end-line 259, :end-column 13, :arglists (quote ([n])), :doc "Tests the primality of n. Note for n larger than 10000 this function is probalitic."}, :name fermat.core/prime?, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Tests the primality of n. Note for n larger than 10000 this function is probalitic."}, divmod {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 54, :column 7, :end-line 54, :end-column 13, :arglists (quote ([a n])), :doc "Returns the quotient and remainder of a."}, :name fermat.core/divmod, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns the quotient and remainder of a."}, pi {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 164, :column 7, :end-line 164, :end-column 9, :arglists (quote ([n])), :doc "Estimates the number of primes less than n. THIS IS NOT THE NUMBER PI! Its just the name of the functio used by mathematicians."}, :name fermat.core/pi, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Estimates the number of primes less than n. THIS IS NOT THE NUMBER PI! Its just the name of the functio used by mathematicians."}, p-1-factorization {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 319, :column 7, :end-line 319, :end-column 24, :arglists (quote ([n])), :doc "Computes a single factor of n. May or may not be prime."}, :name fermat.core/p-1-factorization, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes a single factor of n. May or may not be prime."}, modexp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 111, :column 7, :end-line 111, :end-column 13, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, :name fermat.core/modexp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a e m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, chinese-remainder {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 184, :column 7, :end-line 184, :end-column 24, :arglists (quote ([n a])), :doc "Main routine to return the chinese remainder"}, :name fermat.core/chinese-remainder, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 24, :method-params ([n a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n a])), :doc "Main routine to return the chinese remainder"}, primorial {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 306, :column 7, :end-line 306, :end-column 16, :arglists (quote ([n])), :doc "Returns the product of the first n primes."}, :name fermat.core/primorial, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the product of the first n primes."}, baby-step-giant-step {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 365, :column 7, :end-line 365, :end-column 27, :arglists (quote ([alpha beta p N]))}, :name fermat.core/baby-step-giant-step, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 27, :method-params ([alpha beta p N]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alpha beta p N]))}, factors {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 348, :column 7, :end-line 348, :end-column 14, :arglists (quote ([n])), :doc "Finds all prime factors of n."}, :name fermat.core/factors, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Finds all prime factors of n."}, composite-pi {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 170, :column 7, :end-line 170, :end-column 19, :arglists (quote ([n])), :doc "Returns the number of composites less than n."}, :name fermat.core/composite-pi, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the number of composites less than n."}, primitive-root {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 148, :column 7, :end-line 148, :end-column 21, :arglists (quote ([p])), :doc "Returns the first primitve root of a given prime number."}, :name fermat.core/primitive-root, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 21, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns the first primitve root of a given prime number."}, ciel {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 96, :column 7, :end-line 96, :end-column 11, :arglists (quote ([n])), :doc "Returns the cieling of n."}, :name fermat.core/ciel, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the cieling of n."}, factorial {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 44, :column 7, :end-line 44, :end-column 16, :arglists (quote ([n])), :doc "Computes the factorial of n."}, :name fermat.core/factorial, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes the factorial of n."}, nth-prime {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 296, :column 7, :end-line 296, :end-column 16, :arglists (quote ([n])), :doc "Returns the nth prime."}, :name fermat.core/nth-prime, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the nth prime."}, exp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, :name fermat.core/exp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([base num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, coprime? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 105, :column 7, :end-line 105, :end-column 15, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, :name fermat.core/coprime?, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 15, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, random-miller-rabin {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 216, :column 7, :end-line 216, :end-column 26, :arglists (quote ([n])), :doc "Miller-Rabin primality test. Note this is a probabalistic primality test. It is not guarenteed to work."}, :name fermat.core/random-miller-rabin, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 26, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Miller-Rabin primality test. Note this is a probabalistic primality test. It is not guarenteed to work."}, primorial< {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 312, :column 7, :end-line 312, :end-column 17, :arglists (quote ([n])), :doc "Returns the product of the first primes < n."}, :name fermat.core/primorial<, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the product of the first primes < n."}, modinv {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 123, :column 7, :end-line 123, :end-column 13, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, :name fermat.core/modinv, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, bignum {:name fermat.core/bignum, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 11, :column 1, :end-line 11, :end-column 12, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 11, :column 6, :end-line 11, :end-column 12}, :tag any}, extended-gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 68, :column 7, :end-line 68, :end-column 19, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, :name fermat.core/extended-gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, smoothness {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 159, :column 7, :end-line 159, :end-column 17, :arglists (quote ([n])), :doc "Computes the smoothness of n."}, :name fermat.core/smoothness, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes the smoothness of n."}, primes< {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 301, :column 7, :end-line 301, :end-column 14, :arglists (quote ([n])), :doc "Returns a list of all primes less than n"}, :name fermat.core/primes<, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a list of all primes less than n"}, trial-division {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 235, :column 7, :end-line 235, :end-column 21, :arglists (quote ([n])), :doc "Primality by trial division."}, :name fermat.core/trial-division, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Primality by trial division."}, abs {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 22, :column 7, :end-line 22, :end-column 10, :arglists (quote ([x])), :doc "Returns the absolute value of x."}, :name fermat.core/abs, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the absolute value of x."}, legendre {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 175, :column 7, :end-line 175, :end-column 15, :arglists (quote ([a p])), :doc "Computes the Legendre symbol for a and p. p must be prime."}, :name fermat.core/legendre, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 15, :method-params ([a p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a p])), :doc "Computes the Legendre symbol for a and p. p must be prime."}, fermat-primality {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 247, :column 7, :end-line 247, :end-column 23, :arglists (quote ([n])), :doc "Fermat primality test."}, :name fermat.core/fermat-primality, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Fermat primality test."}, order {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 140, :column 7, :end-line 140, :end-column 12, :arglists (quote ([a n])), :doc "Finds the order of a modulo n.(i.e. the smallest r > 1 such that a^r = 1 mod n)"}, :name fermat.core/order, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 12, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Finds the order of a modulo n.(i.e. the smallest r > 1 such that a^r = 1 mod n)"}}, :cljs.spec/registry-ref [[:fermat.core/pos-num (cljs.spec.alpha/and (fn* [p1__47290#] (cljs.core/<= 0 p1__47290#)) cljs.core/int?)] [:fermat.core/int cljs.core/int?] [:fermat.core/prime fermat.core/prime?] [:fermat.core/coprime fermat.core/coprime?] [:fermat.core/composite (cljs.core/fn [%] (cljs.core/not (fermat.core/prime? %)))]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, m cats.core, cats.core cats.core, maybe cats.monad.maybe, cats.monad.maybe cats.monad.maybe}, :cljs.analyzer/constants {:seen #{p1__44700# p1__46387# fermat.core/prime? prime? p1__46537# p1__46912# :fermat.core/composite :else :fermat.core/int cljs.spec.alpha/and p1__46687# cljs.core/int? p1__47214# :fermat.core/prime p1__47138# p1__46987# p1__46837# p1__46087# % :fermat.core/pos-num p1__46162# p1__46762# p1__46237# coprime? fermat.core/coprime? p1__46312# fn* p1__47290# cljs.core/<= :g-step cljs.core/fn p1__46612# cljs.core/not :fermat.core/coprime p1__46462# p1__47062#}, :order [:fermat.core/pos-num cljs.spec.alpha/and fn* p1__44700# cljs.core/<= cljs.core/int? cljs.core/fn % :fermat.core/int :fermat.core/prime prime? :fermat.core/coprime coprime? :else :g-step p1__46087# fermat.core/prime? fermat.core/coprime? p1__46162# p1__46237# p1__46312# p1__46387# p1__46462# p1__46537# p1__46612# p1__46687# p1__46762# p1__46837# p1__46912# :fermat.core/composite cljs.core/not p1__46987# p1__47062# p1__47138# p1__47214# p1__47290#]}, :doc nil}