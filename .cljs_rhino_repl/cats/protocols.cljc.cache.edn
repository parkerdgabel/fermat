{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cats.protocols, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {Monad {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 90, :column 14, :end-line 90, :end-column 19, :doc "The Monad abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mreturn [[m v]], -mbind [[m mv f]]}}}, :protocol-symbol true, :name cats.protocols/Monad, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 19, :column 1, :line 90, :protocol-info {:methods {-mreturn [[m v]], -mbind [[m mv f]]}}, :info nil, :end-line 90, :tag any, :impls #{}, :doc "The Monad abstraction.", :jsdoc ("@interface")}, Functor {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 61, :column 14, :end-line 61, :end-column 21, :doc "A data type that can be mapped over without altering its context.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-fmap [[ftor f fv]]}}}, :protocol-symbol true, :name cats.protocols/Functor, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 21, :column 1, :line 61, :protocol-info {:methods {-fmap [[ftor f fv]]}}, :info nil, :end-line 61, :tag any, :impls #{}, :doc "A data type that can be mapped over without altering its context.", :jsdoc ("@interface")}, -mempty {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 54, :column 4, :end-line 54, :end-column 11, :protocol cats.protocols/Monoid, :doc "The identity element for the given monoid.", :arglists (quote ([s]))}, :protocol cats.protocols/Monoid, :name cats.protocols/-mempty, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "The identity element for the given monoid."}, -fapply {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 71, :column 4, :end-line 71, :end-column 11, :protocol cats.protocols/Applicative, :doc "Applies the function(s) inside af's context to the value(s)\n     inside av's context while preserving the context.", :arglists (quote ([app af av]))}, :protocol cats.protocols/Applicative, :name cats.protocols/-fapply, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 11, :method-params ([app af av]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app af av])), :doc "Applies the function(s) inside af's context to the value(s)\n     inside av's context while preserving the context."}, Applicative {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 69, :column 14, :end-line 69, :end-column 25, :doc "The Applicative abstraction.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-fapply [[app af av]], -pure [[app v]]}}}, :protocol-symbol true, :name cats.protocols/Applicative, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 25, :column 1, :line 69, :protocol-info {:methods {-fapply [[app af av]], -pure [[app v]]}}, :info nil, :end-line 69, :tag any, :impls #{}, :doc "The Applicative abstraction.", :jsdoc ("@interface")}, -foldl {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 80, :column 4, :end-line 80, :end-column 10, :protocol cats.protocols/Foldable, :doc "Left-associative fold of a structure.", :arglists (quote ([fctx f z xs]))}, :protocol cats.protocols/Foldable, :name cats.protocols/-foldl, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([fctx f z xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 80, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fctx f z xs])), :doc "Left-associative fold of a structure."}, Bifunctor {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 65, :column 14, :end-line 65, :end-column 23, :doc "A 'Functor' of two arguments.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-bimap [[btor f g bv]]}}}, :protocol-symbol true, :name cats.protocols/Bifunctor, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 23, :column 1, :line 65, :protocol-info {:methods {-bimap [[btor f g bv]]}}, :info nil, :end-line 65, :tag any, :impls #{}, :doc "A 'Functor' of two arguments.", :jsdoc ("@interface")}, -mbind {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 93, :column 4, :end-line 93, :end-column 10, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m mv f]))}, :protocol cats.protocols/Monad, :name cats.protocols/-mbind, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([m mv f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv f])), :doc nil}, Printable {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 43, :column 14, :end-line 43, :end-column 23, :doc "An abstraction to make a type printable in a platform\n  independent manner.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-repr [[_]]}}}, :protocol-symbol true, :name cats.protocols/Printable, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 23, :column 1, :line 43, :protocol-info {:methods {-repr [[_]]}}, :info nil, :end-line 43, :tag any, :impls #{}, :doc "An abstraction to make a type printable in a platform\n  independent manner.", :jsdoc ("@interface")}, Contextual {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 35, :column 14, :end-line 35, :end-column 24, :doc "Abstraction that establishes a concrete type as a member of a context.\n\n  A great example is the Maybe monad type Just. It implements\n  this abstraction to establish that Just is part of\n  the Maybe monad.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get-context [[_]]}}}, :protocol-symbol true, :name cats.protocols/Contextual, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 24, :column 1, :line 35, :protocol-info {:methods {-get-context [[_]]}}, :info nil, :end-line 35, :tag any, :impls #{}, :doc "Abstraction that establishes a concrete type as a member of a context.\n\n  A great example is the Maybe monad type Just. It implements\n  this abstraction to establish that Just is part of\n  the Maybe monad.", :jsdoc ("@interface")}, -traverse {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 86, :column 4, :end-line 86, :end-column 13, :protocol cats.protocols/Traversable, :doc "Map each element to an Applicative, evaluate the applicatives from left\n     to right and collect the results.", :arglists (quote ([tctx f tv]))}, :protocol cats.protocols/Traversable, :name cats.protocols/-traverse, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 13, :method-params ([tctx f tv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tctx f tv])), :doc "Map each element to an Applicative, evaluate the applicatives from left\n     to right and collect the results."}, -foldr {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 81, :column 4, :end-line 81, :end-column 10, :protocol cats.protocols/Foldable, :doc "Right-associative fold of a structure.", :arglists (quote ([fctx f z xs]))}, :protocol cats.protocols/Foldable, :name cats.protocols/-foldr, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([fctx f z xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 81, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fctx f z xs])), :doc "Right-associative fold of a structure."}, -extract {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 59, :column 4, :end-line 59, :end-column 12, :protocol cats.protocols/Extract, :doc "Extract the value from monad context.", :arglists (quote ([mv]))}, :protocol cats.protocols/Extract, :name cats.protocols/-extract, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 12, :method-params ([mv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mv])), :doc "Extract the value from monad context."}, MonadPlus {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 100, :column 14, :end-line 100, :end-column 23, :doc "A complement abstraction for Monad that\n  supports the notion of addition.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mplus [[m mv mv']]}}}, :protocol-symbol true, :name cats.protocols/MonadPlus, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 23, :column 1, :line 100, :protocol-info {:methods {-mplus [[m mv mv']]}}, :info nil, :end-line 100, :tag any, :impls #{}, :doc "A complement abstraction for Monad that\n  supports the notion of addition.", :jsdoc ("@interface")}, -repr {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 46, :column 4, :end-line 46, :end-column 9, :protocol cats.protocols/Printable, :doc "Get the repl ready representation of the object.", :arglists (quote ([_]))}, :protocol cats.protocols/Printable, :name cats.protocols/-repr, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 9, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get the repl ready representation of the object."}, -mzero {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 98, :column 4, :end-line 98, :end-column 10, :protocol cats.protocols/MonadZero, :doc "The identity element for the given monadzero.", :arglists (quote ([m]))}, :protocol cats.protocols/MonadZero, :name cats.protocols/-mzero, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "The identity element for the given monadzero."}, -mreturn {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 92, :column 4, :end-line 92, :end-column 12, :protocol cats.protocols/Monad, :doc nil, :arglists (quote ([m v]))}, :protocol cats.protocols/Monad, :name cats.protocols/-mreturn, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 12, :method-params ([m v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v])), :doc nil}, -pure {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 74, :column 4, :end-line 74, :end-column 9, :protocol cats.protocols/Applicative, :doc "Takes any context or monadic value `app` and any value `v`, and puts\n     the value `v` in the most minimal context (normally `mempty`) of same type of `app`", :arglists (quote ([app v]))}, :protocol cats.protocols/Applicative, :name cats.protocols/-pure, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 9, :method-params ([app v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app v])), :doc "Takes any context or monadic value `app` and any value `v`, and puts\n     the value `v` in the most minimal context (normally `mempty`) of same type of `app`"}, -fmap {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 63, :column 4, :end-line 63, :end-column 9, :protocol cats.protocols/Functor, :doc "Applies function f to the value(s) inside the context of the functor fv.", :arglists (quote ([ftor f fv]))}, :protocol cats.protocols/Functor, :name cats.protocols/-fmap, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 9, :method-params ([ftor f fv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ftor f fv])), :doc "Applies function f to the value(s) inside the context of the functor fv."}, MonadZero {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 95, :column 14, :end-line 95, :end-column 23, :doc "A complement abstraction for monad that\n  supports the notion of an identity element.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mzero [[m]]}}}, :protocol-symbol true, :name cats.protocols/MonadZero, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 23, :column 1, :line 95, :protocol-info {:methods {-mzero [[m]]}}, :info nil, :end-line 95, :tag any, :impls #{}, :doc "A complement abstraction for monad that\n  supports the notion of an identity element.", :jsdoc ("@interface")}, Semigroup {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 48, :column 14, :end-line 48, :end-column 23, :doc "A structure with an associative binary operation.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mappend [[s sv sv']]}}}, :protocol-symbol true, :name cats.protocols/Semigroup, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 23, :column 1, :line 48, :protocol-info {:methods {-mappend [[s sv sv']]}}, :info nil, :end-line 48, :tag any, :impls #{}, :doc "A structure with an associative binary operation.", :jsdoc ("@interface")}, Traversable {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 83, :column 14, :end-line 83, :end-column 25, :doc "Abstraction of data structures that can be traversed from left to right\n  performing an action on every element.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-traverse [[tctx f tv]]}}}, :protocol-symbol true, :name cats.protocols/Traversable, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 25, :column 1, :line 83, :protocol-info {:methods {-traverse [[tctx f tv]]}}, :info nil, :end-line 83, :tag any, :impls #{}, :doc "Abstraction of data structures that can be traversed from left to right\n  performing an action on every element.", :jsdoc ("@interface")}, Monoid {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 52, :column 14, :end-line 52, :end-column 20, :doc "A Semigroup which has an identity element with respect to an associative binary operation.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-mempty [[s]]}}}, :protocol-symbol true, :name cats.protocols/Monoid, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 20, :column 1, :line 52, :protocol-info {:methods {-mempty [[s]]}}, :info nil, :end-line 52, :tag any, :impls #{}, :doc "A Semigroup which has an identity element with respect to an associative binary operation.", :jsdoc ("@interface")}, Context {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 32, :column 14, :end-line 32, :end-column 21, :doc "A marker protocol for identifying the valid context types.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {}}}, :protocol-symbol true, :name cats.protocols/Context, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 21, :column 1, :line 32, :protocol-info {:methods {}}, :info nil, :end-line 32, :tag any, :impls #{}, :doc "A marker protocol for identifying the valid context types.", :jsdoc ("@interface")}, Extract {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 56, :column 14, :end-line 56, :end-column 21, :doc "A type class to extract the\n  value from a monad context.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-extract [[mv]]}}}, :protocol-symbol true, :name cats.protocols/Extract, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 21, :column 1, :line 56, :protocol-info {:methods {-extract [[mv]]}}, :info nil, :end-line 56, :tag any, :impls #{}, :doc "A type class to extract the\n  value from a monad context.", :jsdoc ("@interface")}, Foldable {:meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 78, :column 14, :end-line 78, :end-column 22, :doc "Abstraction of data structures that can be folded to a summary value.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-foldl [[fctx f z xs]], -foldr [[fctx f z xs]]}}}, :protocol-symbol true, :name cats.protocols/Foldable, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 22, :column 1, :line 78, :protocol-info {:methods {-foldl [[fctx f z xs]], -foldr [[fctx f z xs]]}}, :info nil, :end-line 78, :tag any, :impls #{}, :doc "Abstraction of data structures that can be folded to a summary value.", :jsdoc ("@interface")}, -mappend {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 50, :column 4, :end-line 50, :end-column 12, :protocol cats.protocols/Semigroup, :doc "An associative addition operation.", :arglists (quote ([s sv sv']))}, :protocol cats.protocols/Semigroup, :name cats.protocols/-mappend, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 12, :method-params ([s sv sv']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s sv sv'])), :doc "An associative addition operation."}, -bimap {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 67, :column 4, :end-line 67, :end-column 10, :protocol cats.protocols/Bifunctor, :doc "Map over both arguments at the same time.", :arglists (quote ([btor f g bv]))}, :protocol cats.protocols/Bifunctor, :name cats.protocols/-bimap, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([btor f g bv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 67, :max-fixed-arity 4, :fn-var true, :arglists (quote ([btor f g bv])), :doc "Map over both arguments at the same time."}, -mplus {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 103, :column 4, :end-line 103, :end-column 10, :protocol cats.protocols/MonadPlus, :doc "An associative addition operation.", :arglists (quote ([m mv mv']))}, :protocol cats.protocols/MonadPlus, :name cats.protocols/-mplus, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 10, :method-params ([m mv mv']), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 103, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m mv mv'])), :doc "An associative addition operation."}, -get-context {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/protocols.cljc", :line 41, :column 4, :end-line 41, :end-column 16, :protocol cats.protocols/Contextual, :doc "Get the context associated with the type.", :arglists (quote ([_]))}, :protocol cats.protocols/Contextual, :name cats.protocols/-get-context, :variadic false, :file ".cljs_rhino_repl/cats/protocols.cljc", :end-column 16, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Get the context associated with the type."}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A collection of protocols upon which the cats abstractions are built.\n\n  NOTE: Functions of this namespace are not intended to be used directly.\n  It is considered internal api."}