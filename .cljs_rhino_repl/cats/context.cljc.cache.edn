{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name cats.context, :imports nil, :requires {p cats.protocols, cats.protocols cats.protocols}, :cljs.spec/speced-vars [], :uses nil, :defs {*context* {:name cats.context/*context*, :file ".cljs_rhino_repl/cats/context.cljc", :line 30, :column 1, :end-line 30, :end-column 25, :dynamic true, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 30, :column 16, :end-line 30, :end-column 25, :dynamic true}, :tag clj-nil}, *override* {:name cats.context/*override*, :file ".cljs_rhino_repl/cats/context.cljc", :line 31, :column 1, :end-line 31, :end-column 26, :dynamic true, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 31, :column 16, :end-line 31, :end-column 26, :dynamic true}, :tag clj-nil}, throw-illegal-argument {:no-doc true, :protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 33, :column 7, :end-line 33, :end-column 29, :arglists (quote ([text])), :no-doc true, :internal true}, :name cats.context/throw-illegal-argument, :variadic false, :file ".cljs_rhino_repl/cats/context.cljc", :end-column 29, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal true, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, context? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 39, :column 7, :end-line 39, :end-column 15, :arglists (quote ([v])), :doc "Return `true` if the provided value satisfies\n  the Context protocol."}, :name cats.context/context?, :variadic false, :file ".cljs_rhino_repl/cats/context.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return `true` if the provided value satisfies\n  the Context protocol."}, infer {:no-doc true, :protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 75, :column 7, :end-line 75, :end-column 12, :arglists (quote ([] [v])), :doc "Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation.", :no-doc true, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}}, :name cats.context/infer, :variadic false, :file ".cljs_rhino_repl/cats/context.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [v]), :arglists ([] [v]), :arglists-meta (nil nil)}, :method-params ([] [v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists ([] [v]), :doc "Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation."}, get-current {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/.cljs_rhino_repl/cats/context.cljc", :line 99, :column 7, :end-line 99, :end-column 18, :arglists (quote ([& args])), :doc "Deprecated alias to `infer`.", :deprecated true, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cats.context/get-current, :variadic true, :file ".cljs_rhino_repl/cats/context.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 99, :deprecated true, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Deprecated alias to `infer`."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "A cats context management."}