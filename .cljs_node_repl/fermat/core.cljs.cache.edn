{:rename-macros {}, :renames {}, :externs {Error {}, Math {log {}}}, :use-macros {}, :excludes #{}, :name fermat.core, :imports nil, :requires {cats.builtin cats.builtin, gstring goog.string, math goog.math, goog.string goog.string, maybe cats.monad.maybe, m cats.core, cats.core cats.core, cats.monad.maybe cats.monad.maybe, goog.string.format goog.string.format, s cljs.spec.alpha, goog.math goog.math, cljs.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {assert-prime {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([n])), :doc "Asserts that n is prime."}, :name fermat.core/assert-prime, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Asserts that n is prime."}, find-k-m {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 192, :column 8, :end-line 192, :end-column 16, :private true, :arglists (quote ([n])), :doc "Rewrites n as 2k*m with m odd."}, :private true, :name fermat.core/find-k-m, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Rewrites n as 2k*m with m odd."}, k-rand-nums {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 201, :column 8, :end-line 201, :end-column 19, :private true, :arglists (quote ([k n])), :doc "Generates k random numbers in between 2 and n-2. Helper function for Miller-Rabin Primality Test."}, :private true, :name fermat.core/k-rand-nums, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([k n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k n])), :doc "Generates k random numbers in between 2 and n-2. Helper function for Miller-Rabin Primality Test."}, primes {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 283, :column 7, :end-line 283, :end-column 13, :arglists (quote ([n])), :doc "Returns a list of the first n primes."}, :name fermat.core/primes, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a list of the first n primes."}, totient {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 131, :column 7, :end-line 131, :end-column 14, :arglists (quote ([n])), :doc "Euler-totient function for n"}, :name fermat.core/totient, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Euler-totient function for n"}, gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 59, :column 7, :end-line 59, :end-column 10, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, :name fermat.core/gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, coprime {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 106, :column 7, :end-line 106, :end-column 14, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, :name fermat.core/coprime, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, lazy-primes {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 261, :column 7, :end-line 261, :end-column 18, :arglists (quote ([])), :doc "Returns a lazy sequence of primes."}, :name fermat.core/lazy-primes, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a lazy sequence of primes."}, floor {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 88, :column 7, :end-line 88, :end-column 12, :arglists (quote ([n])), :doc "Returns the nearest integer less than n."}, :name fermat.core/floor, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 12, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the nearest integer less than n."}, prime? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 251, :column 7, :end-line 251, :end-column 13, :arglists (quote ([n])), :doc "Tests the primality of n. Note for n larger than 10000 this function is probalitic."}, :name fermat.core/prime?, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Tests the primality of n. Note for n larger than 10000 this function is probalitic."}, divmod {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([a n])), :doc "Returns the quotient and remainder of a."}, :name fermat.core/divmod, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns the quotient and remainder of a."}, pi {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 164, :column 7, :end-line 164, :end-column 9, :arglists (quote ([n])), :doc "Estimates the number of primes less than n. THIS IS NOT THE NUMBER PI! Its just the name of the functio used by mathematicians."}, :name fermat.core/pi, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Estimates the number of primes less than n. THIS IS NOT THE NUMBER PI! Its just the name of the functio used by mathematicians."}, p-1-factorization {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 300, :column 7, :end-line 300, :end-column 24, :arglists (quote ([n])), :doc "Computes a single factor of n. May or may not be prime."}, :name fermat.core/p-1-factorization, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes a single factor of n. May or may not be prime."}, modexp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 110, :column 7, :end-line 110, :end-column 13, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, :name fermat.core/modexp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a e m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, chinese-remainder {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 178, :column 7, :end-line 178, :end-column 24, :arglists (quote ([n a])), :doc "Main routine to return the chinese remainder"}, :name fermat.core/chinese-remainder, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 24, :method-params ([n a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n a])), :doc "Main routine to return the chinese remainder"}, assert-coprime {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 17, :column 7, :end-line 17, :end-column 21, :arglists (quote ([a n])), :doc "Asserts that a and n are coprime"}, :name fermat.core/assert-coprime, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 21, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Asserts that a and n are coprime"}, baby-step-giant-step {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 345, :column 7, :end-line 345, :end-column 27, :arglists (quote ([alpha beta p N]))}, :name fermat.core/baby-step-giant-step, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 27, :method-params ([alpha beta p N]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 4, :fn-var true, :arglists (quote ([alpha beta p N]))}, factors {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 328, :column 7, :end-line 328, :end-column 14, :arglists (quote ([n])), :doc "Finds all prime factors of n."}, :name fermat.core/factors, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Finds all prime factors of n."}, primitive-root {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 148, :column 7, :end-line 148, :end-column 21, :arglists (quote ([p])), :doc "Returns the first primitve root of a given prime number."}, :name fermat.core/primitive-root, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 21, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns the first primitve root of a given prime number."}, ciel {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 95, :column 7, :end-line 95, :end-column 11, :arglists (quote ([n])), :doc "Returns the cieling of n."}, :name fermat.core/ciel, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 11, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the cieling of n."}, factorial {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 43, :column 7, :end-line 43, :end-column 16, :arglists (quote ([n])), :doc "Computes the factorial of n."}, :name fermat.core/factorial, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes the factorial of n."}, nth-prime {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 288, :column 7, :end-line 288, :end-column 16, :arglists (quote ([n])), :doc "Returns the nth prime."}, :name fermat.core/nth-prime, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns the nth prime."}, exp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 29, :column 7, :end-line 29, :end-column 10, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, :name fermat.core/exp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([base num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, coprime? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 104, :column 7, :end-line 104, :end-column 15, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, :name fermat.core/coprime?, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 15, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Checks whether a and n are coprime."}, random-miller-rabin {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 210, :column 7, :end-line 210, :end-column 26, :arglists (quote ([n])), :doc "Miller-Rabin primality test. Note this is a probabalistic primality test. It is not guarenteed to work."}, :name fermat.core/random-miller-rabin, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 26, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Miller-Rabin primality test. Note this is a probabalistic primality test. It is not guarenteed to work."}, modinv {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 122, :column 7, :end-line 122, :end-column 13, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, :name fermat.core/modinv, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, extended-gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, :name fermat.core/extended-gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, smoothness {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 159, :column 7, :end-line 159, :end-column 17, :arglists (quote ([n])), :doc "Computes the smoothness of n."}, :name fermat.core/smoothness, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Computes the smoothness of n."}, primes< {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 293, :column 7, :end-line 293, :end-column 14, :arglists (quote ([n])), :doc "Returns a list of all primes less than n"}, :name fermat.core/primes<, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a list of all primes less than n"}, trial-division {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 229, :column 7, :end-line 229, :end-column 21, :arglists (quote ([n])), :doc "Primality by trial division."}, :name fermat.core/trial-division, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 21, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Primality by trial division."}, abs {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 21, :column 7, :end-line 21, :end-column 10, :arglists (quote ([x])), :doc "Returns the absolute value of x."}, :name fermat.core/abs, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the absolute value of x."}, legendre {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 169, :column 7, :end-line 169, :end-column 15, :arglists (quote ([a p])), :doc "Computes the Legendre symbol for a and p. p must be prime."}, :name fermat.core/legendre, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 15, :method-params ([a p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a p])), :doc "Computes the Legendre symbol for a and p. p must be prime."}, fermat-primality {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 241, :column 7, :end-line 241, :end-column 23, :arglists (quote ([n]))}, :name fermat.core/fermat-primality, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 23, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, assert-number {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 15, :column 7, :end-line 15, :end-column 20, :arglists (quote ([n])), :doc "Asserts that a number is a positve integer."}, :name fermat.core/assert-number, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 20, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Asserts that a number is a positve integer."}, order {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 139, :column 7, :end-line 139, :end-column 12, :arglists (quote ([a n])), :doc "Finds the order of a modulo n.(i.e. the smallest r > 1 such that a^r = 1 mod n)"}, :name fermat.core/order, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 12, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Finds the order of a modulo n.(i.e. the smallest r > 1 such that a^r = 1 mod n)"}}, :cljs.spec/registry-ref [[:fermat.core/pos-num (cljs.spec.alpha/and (fn* [p1__50546#] (cljs.core/<= 0 p1__50546#)) cljs.core/int?)] [:fermat.core/prime fermat.core/prime?] [:fermat.core/coprime fermat.core/coprime?] [:fermat.core/int cljs.core/int?]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, m cats.core, cats.core cats.core, maybe cats.monad.maybe, cats.monad.maybe cats.monad.maybe}, :cljs.analyzer/constants {:seen #{cljs.core/< p1__49418# p1__49994# p1__50321# fermat.core/prime? :else :fermat.core/int cljs.spec.alpha/and cljs.core/int? p1__49618# :fermat.core/prime p1__49018# p1__50446# % p1__49818# :fermat.core/pos-num coprime? fermat.core/coprime? p1__49218# fn* cljs.core/<= :g-step cljs.core/fn p1__50546# p1__50171# :fermat.core/coprime p1__48818#}, :order [:else :g-step :fermat.core/pos-num cljs.spec.alpha/and fn* p1__48818# cljs.core/< cljs.core/int? cljs.core/fn % p1__49018# :fermat.core/prime fermat.core/prime? p1__49218# :fermat.core/coprime coprime? p1__49418# fermat.core/coprime? p1__49618# cljs.core/<= p1__49818# p1__49994# p1__50171# p1__50321# p1__50446# :fermat.core/int p1__50546#]}, :doc nil}