{:rename-macros {}, :renames {}, :use-macros {unchecked-aset devtools.oops, unchecked-aget devtools.oops}, :excludes #{}, :name devtools.formatters, :imports nil, :requires {ua goog.labs.userAgent.browser, goog.labs.userAgent.browser goog.labs.userAgent.browser, prefs devtools.prefs, devtools.prefs devtools.prefs, devtools.util devtools.util, context devtools.context, devtools.context devtools.context, devtools.formatters.core devtools.formatters.core}, :cljs.spec/speced-vars [], :uses {body-api-call devtools.formatters.core, in-node-context? devtools.util, get-formatters-safe devtools.util, set-formatters-safe! devtools.util, has-body-api-call devtools.formatters.core, header-api-call devtools.formatters.core}, :defs {present? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 72, :column 8, :end-line 72, :end-column 16, :private true, :arglists (quote ([]))}, :private true, :name devtools.formatters/present?, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->CLJSDevtoolsFormatter {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 19, :column 10, :end-line 19, :end-column 31, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([]))}, :protocols #{}, :name devtools.formatters/->CLJSDevtoolsFormatter, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :skip-protocol-flag nil}, monitor-api-call-if-avail {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 28, :column 8, :end-line 28, :end-column 33, :private true, :arglists (quote ([name api-call args]))}, :private true, :name devtools.formatters/monitor-api-call-if-avail, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 33, :method-params ([name api-call args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name api-call args]))}, build-cljs-formatter {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 55, :column 8, :end-line 55, :end-column 28, :private true, :arglists (quote ([]))}, :private true, :name devtools.formatters/build-cljs-formatter, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *installed* {:name devtools.formatters/*installed*, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :line 9, :column 1, :end-line 9, :end-column 27, :dynamic true, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 9, :column 16, :end-line 9, :end-column 27, :dynamic true}, :tag boolean}, is-ours? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 69, :column 8, :end-line 69, :end-column 16, :private true, :arglists (quote ([o]))}, :private true, :name devtools.formatters/is-ours?, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 16, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, find-fn-in-debug-ns {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 22, :column 8, :end-line 22, :end-column 27, :private true, :arglists (quote ([fn-name]))}, :private true, :name devtools.formatters/find-fn-in-debug-ns, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 27, :method-params ([fn-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-name]))}, install! {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 93, :column 7, :end-line 93, :end-column 15, :arglists (quote ([]))}, :name devtools.formatters/install!, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, monitor-api-calls {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 38, :column 8, :end-line 38, :end-column 25, :private true, :arglists (quote ([name api-call]))}, :private true, :name devtools.formatters/monitor-api-calls, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 25, :method-params ([name api-call]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name api-call]))}, sanitize {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 45, :column 8, :end-line 45, :end-column 16, :private true, :arglists (quote ([name api-call]))}, :private true, :name devtools.formatters/sanitize, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 16, :method-params ([name api-call]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name api-call]))}, install-our-formatter! {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 76, :column 8, :end-line 76, :end-column 30, :private true, :arglists (quote ([formatter]))}, :private true, :name devtools.formatters/install-our-formatter!, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 30, :method-params ([formatter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([formatter]))}, *sanitizer-enabled* {:name devtools.formatters/*sanitizer-enabled*, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :line 10, :column 1, :end-line 10, :end-column 35, :dynamic true, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 10, :column 16, :end-line 10, :end-column 35, :dynamic true}, :tag boolean}, available? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 15, :column 17, :end-line 15, :end-column 27, :dynamic true, :arglists (quote ([]))}, :name devtools.formatters/available?, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, log-exception-if-avail {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 33, :column 8, :end-line 33, :end-column 30, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name devtools.formatters/log-exception-if-avail, :variadic true, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, installed? {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 90, :column 7, :end-line 90, :end-column 17, :arglists (quote ([]))}, :name devtools.formatters/installed?, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, obsolete-formatter-key {:name devtools.formatters/obsolete-formatter-key, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :line 13, :column 1, :end-line 13, :end-column 28, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 13, :column 6, :end-line 13, :end-column 28}, :tag string}, uninstall-our-formatters! {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 83, :column 8, :end-line 83, :end-column 33, :private true, :arglists (quote ([]))}, :private true, :name devtools.formatters/uninstall-our-formatters!, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, uninstall! {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 99, :column 7, :end-line 99, :end-column 17, :arglists (quote ([]))}, :name devtools.formatters/uninstall!, :variadic false, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, CLJSDevtoolsFormatter {:num-fields 0, :protocols #{}, :name devtools.formatters/CLJSDevtoolsFormatter, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :end-column 31, :type true, :column 10, :line 19, :record false, :end-line 19, :skip-protocol-flag nil}, *monitor-enabled* {:name devtools.formatters/*monitor-enabled*, :file "resources/public/js/compiled/out/devtools/formatters.cljs", :line 11, :column 1, :end-line 11, :end-column 33, :dynamic true, :meta {:file "/home/parker/clojure-script-projects/fermat/resources/public/js/compiled/out/devtools/formatters.cljs", :line 11, :column 16, :end-line 11, :end-column 33, :dynamic true}, :tag boolean}}, :cljs.spec/registry-ref [], :require-macros {devtools.oops devtools.oops, prefs devtools.prefs, devtools.prefs devtools.prefs}, :cljs.analyzer/constants {:seen #{:legacy-formatter}, :order [:legacy-formatter]}, :doc nil}