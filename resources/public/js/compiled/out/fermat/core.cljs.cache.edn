{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name fermat.core, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {find-k-m {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 84, :column 8, :end-line 84, :end-column 16, :private true, :arglists (quote ([n]))}, :private true, :name fermat.core/find-k-m, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 25, :column 7, :end-line 25, :end-column 10, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, :name fermat.core/gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns the greatest common denominator of a and b."}, miller-rabin {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 92, :column 7, :end-line 92, :end-column 19, :arglists (quote ([n]))}, :name fermat.core/miller-rabin, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, modexp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 52, :column 7, :end-line 52, :end-column 13, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, :name fermat.core/modexp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a e m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a e m])), :doc "Computes the modular exponent of a mod m (i.e a^e mod m)"}, exp {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 11, :column 7, :end-line 11, :end-column 10, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, :name fermat.core/exp, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([base num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base num])), :doc "Returns the base multiblied num times."}, modinv {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 63, :column 7, :end-line 63, :end-column 13, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, :name fermat.core/modinv, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 13, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns the modular inverse of a modulo n."}, extended-gcd {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, :name fermat.core/extended-gcd, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 19, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "The extended Euclidean algorithm\n  Returns a list containing the GCD and the Bézout coefficients\n  corresponding to the inputs. "}, chinese_remainder {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 72, :column 7, :end-line 72, :end-column 24, :arglists (quote ([n a])), :doc " Main routine to return the chinese remainder "}, :name fermat.core/chinese_remainder, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 24, :method-params ([n a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n a])), :doc " Main routine to return the chinese remainder "}, m* {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 55, :column 9, :end-line 55, :end-column 11, :arglists (quote ([p q]))}, :name fermat.core/m*, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 11, :method-params ([p q]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p q]))}, abs {:protocol-inline nil, :meta {:file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :line 3, :column 7, :end-line 3, :end-column 10, :arglists (quote ([x])), :doc "Returns the absolute value of x."}, :name fermat.core/abs, :variadic false, :file "/home/parker/clojure-script-projects/fermat/src/cljs/fermat/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns the absolute value of x."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}